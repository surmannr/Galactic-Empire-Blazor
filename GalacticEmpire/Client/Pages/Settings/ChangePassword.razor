@page "/change-password"
@using GalacticEmpire.Shared.Dto.User
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager uriHelper
@inject EmpireState State
@inject ISnackbar Snackbar

<div class="row glass w-100 h-100 justify-content-center p-3">
    <div class="col-12 mt-5">
         <MudText Typo="Typo.h5" Style="color: aliceblue" Align="Align.Center">Jelszó megváltoztatása</MudText>
    </div>
    <div class="col-12 mt-3 mb-5">
         <MudTextField InputType="InputType.Password" @bind-Value="NewPassword" Required="true" RequiredError="Az új jelszó megadása kötelező!" Label="Új jelszó" Variant="Variant.Text"></MudTextField>
    </div>
    <div class="col-12 mt-3 mb-5">
         <MudTextField InputType="InputType.Password" @bind-Value="NewPasswordAgain" Required="true" RequiredError="Az új jelszó megadása kötelező!" Label="Új jelszó" Variant="Variant.Text" Validation="@(new Func<string, string>(PasswordMatch))"></MudTextField>
    </div>
    <div class="col-12 mt-3 mb-5">
         <MudButton Variant="Variant.Filled" Color="Color.Tertiary" FullWidth="true" Style="color: aliceblue; margin-bottom:10px" OnClick="Change">Megváltoztat</MudButton>
    </div>
</div>

<style>
     .glass
    {
        box-shadow: 20px 20px 50px rgba(0,0,0,0.5);
        border-radius: 15px;
        background: rgba(0,0,0,0.43);
        color: aliceblue !important;
        backdrop-filter: blur(5px);
        border: 1px solid rgba(255,255,255,0.5);
    }
    .mud-input>input.mud-input-root, div.mud-input-slot.mud-input-root, .mud-input-helper-text{
        color: aliceblue !important;
    }

    .mud-input-control .mud-input-control-input-container div.mud-input.mud-input-text{
       color:aliceblue;
   }

   .mud-shrink~label.mud-input-label.mud-input-label-inputcontrol, .mud-input:focus-within~label.mud-input-label.mud-input-label-inputcontrol,
   .mud-input-control>.mud-input-control-input-container>.mud-input-label-inputcontrol{
       color:aliceblue;
   }
</style>

@code {
    public string NewPassword { get; set; }
    public string NewPasswordAgain { get; set; }

    public async void Change()
    {
        if(NewPassword != NewPasswordAgain)
        {
            Snackbar.Add("A két jelszó nem egyezik meg!", Severity.Error);
            return;
        }

        var changePassword = new ChangePasswordDto
        {
            NewPassword = NewPassword
        };

        var http = HttpClientFactory.CreateClient("blazorWASM");
        var result = await http.PostAsJsonAsync<ChangePasswordDto>($"api/Users/change-password", changePassword);
        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Sikeresen megváltoztattad a jelszavad!", Severity.Success);
        }
        else
        {
            await HandleError(result, Snackbar);
        }
    }

      private async Task<bool> HandleError(HttpResponseMessage responseMessage, ISnackbar Snackbar)
        {
            if (!responseMessage.IsSuccessStatusCode)
            {
                var error = await responseMessage.Content.ReadFromJsonAsync<ErrorHandling>();
                Snackbar.Add(error.Title, Severity.Error);
                return true;
            }

            return false;
        }

     private string PasswordMatch(string arg)
    {
        if (NewPassword != arg)
            return "A jelszavak nem egyeznek.";
        return null;
    }
}
