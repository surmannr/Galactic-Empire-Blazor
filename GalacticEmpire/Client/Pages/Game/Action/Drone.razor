@page "/drone"
@using GalacticEmpire.Shared.Dto.Drone
@using GalacticEmpire.Shared.Dto.Unit
@using GalacticEmpire.Shared.Dto.User
@using GalacticEmpire.Shared.Enums.Unit
@using GalacticEmpire.Shared.Extensions.EnumExtensions
@using Microsoft.Extensions.Logging
@layout MainLayout
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager uriHelper
@implements IDisposable
@inject EmpireState State
@inject ISnackbar Snackbar

<div class="row h-100 glass pr-md-5 pl-md-5 pb-md-5 m-0 w-100">

     @if(State.Empire != null && State.Empire.Activities.ActiveSpyingDate.HasValue)
    {
        <div class="col-12 mt-4">
              <TimerComponent EndDate="State.Empire.Activities.ActiveSpyingDate"></TimerComponent>
        </div>
    }

    <div class="col-12 mt-4">
       <MudText Typo="Typo.h4" Align="Align.Center" Style="color: aliceblue" Class="mb-4 mt-4">Kémkedés</MudText>
    </div>

    <div class="col-12 mt-2">
        <MudAutocomplete T="string" Label="Játékos kémkedése" @bind-Value="AttackedPlayerName" SearchFunc="@SearchAttackablePlayer"
                         ResetValueOnEmptyText="true"
                         CoerceText="true" CoerceValue="true"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Info" />
    </div>

    @if(State.Empire !=null && State.Empire.Units != null && State.Empire.Units.Count() != 0)
    {
        @if(State.Empire.Units.Where(e => e.Name == UnitEnum.ScoutDrone.GetDisplayName()).Sum(e=>e.Count) == 0)
        {
            <div class="col-12 mt-4">
                  <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error" Class="mb-4 mt-4">Nem rendelkezel kém egységgel!</MudText>
            </div>
        }

        @foreach(var unit in State.Empire.Units.Where(u => u.Name == UnitEnum.ScoutDrone.GetDisplayName() && u.Count > 0).ToList())
        {
            <div class="row col-md-12 col-sm-12 mt-2 mb-2">
                <div class="col-md-2 col-sm-1 d-flex justify-content-center">
                    <img src="@unit.ImageUrl" class="m-auto img-responsive invert-img" height="18"/>
                </div>
                <div class="col-md-3 col-sm-4 d-flex justify-content-center justify-content-md-start">
                    <MudBadge Content="@("lvl" + @unit.Level)" Color="Color.Primary" Class="mx-6 my-4">
                        <MudText Typo="Typo.body1" Style="color: aliceblue">@unit.Name</MudText>
                    </MudBadge>
                </div>
                <div class="col-md-3 col-sm-12 d-flex justify-content-center align-items-center">
                    <MudText Typo="Typo.body1" Align="Align.Center" Style="color: aliceblue">Elérhető: @unit.Count db</MudText>
                </div>
                @if(AttackerUnitIdPairCount.ContainsKey(unit.Id.ToString() + "_" + unit.Level.ToString()))
                {
                    <div class="col-md-4 col-sm-12 d-flex justify-content-center align-items-center">
                         <MudSlider Step="1" Max="@unit.Count" @bind-Value="@AttackerUnitIdPairCount[unit.Id.ToString() + "_" + unit.Level.ToString()]" Color="Color.Tertiary"><MudText Color="Color.Tertiary" Typo="Typo.body1" Class="mr-1">Mennyiség: @AttackerUnitIdPairCount[unit.Id.ToString() + "_" + unit.Level.ToString()]</MudText></MudSlider>
                    </div>
                }

            </div>
        }

         <div class="col-12 mt-2">
             @if(State.Empire.Activities.ActiveSpyingDate == null && State.Empire.Units.Where(e => e.Name == UnitEnum.ScoutDrone.GetDisplayName()).Sum(e=>e.Count) != 0)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" FullWidth="true" Style="color: aliceblue; margin-bottom:10px" OnClick="DoDrone">Kémkedés</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Surface" FullWidth="true" Style="color: aliceblue; margin-bottom:10px" Disabled>Folyamatban van egy támadás</MudButton>
            }

        </div>
    }

</div>

<style>
    .glass
    {
        box-shadow: 20px 20px 50px rgba(0,0,0,0.5);
        border-radius: 15px;
        background: rgba(0,0,0,0.43);
        backdrop-filter: blur(5px);
        border: 1px solid rgba(255,255,255,0.5);
    }

    .invert-img {
       -webkit-filter: invert(1);
       filter: invert(1);
   }

   .mud-input-control .mud-input-control-input-container div.mud-input.mud-input-text{
       color:aliceblue;
   }

   .mud-shrink~label.mud-input-label.mud-input-label-inputcontrol, .mud-input:focus-within~label.mud-input-label.mud-input-label-inputcontrol,
   .mud-input-control>.mud-input-control-input-container>.mud-input-label-inputcontrol{
       color:aliceblue;
   }
</style>

@code {
    public string AttackedPlayerName;
    public List<AttackableUserDto> AttackablePlayers { get; set; }
    public Dictionary<string, int> AttackerUnitIdPairCount { get; set; } = new Dictionary<string, int>();

    protected async override Task OnInitializedAsync()
    {
        await State.InitializeAsync(uriHelper, HttpClientFactory, Snackbar);
        
        var http = HttpClientFactory.CreateClient("blazorWASM");
        AttackablePlayers = await http.GetFromJsonAsync<List<AttackableUserDto>>($"api/Users/attackable-users");

        AttackerUnitIdPairCount = new Dictionary<string, int>();

        if(State.Empire !=null && State.Empire.Units != null && State.Empire.Units.Count() != 0)
        {
            foreach(var unit in State.Empire.Units)
            {
                AttackerUnitIdPairCount.Add(unit.Id.ToString() + "_" + unit.Level.ToString(), 0);
            }
        }
    }

    public async Task DoDrone()
    {
        var player = AttackablePlayers.Where(c => c.UserName == AttackedPlayerName).FirstOrDefault();

        if(player == null)
        {
            Snackbar.Add($"Nem létezik {AttackedPlayerName} névvel rendelkező játékos.", Severity.Error);
            return;
        }

        SendDroneDto sendAttack = new SendDroneDto
        {
            DronedEmpireId = player.EmpireId
        };

        foreach(var dict in AttackerUnitIdPairCount)
        {
            if(dict.Value != 0)
            {
                sendAttack.NumberOfDrones = dict.Value;
            }
        }

        await State.DronePlayer(sendAttack, HttpClientFactory, uriHelper, Snackbar);
    }

    private async Task<IEnumerable<string>> SearchAttackablePlayer(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new string[0];

        var http = HttpClientFactory.CreateClient("blazorWASM");
        AttackablePlayers = await http.GetFromJsonAsync<List<AttackableUserDto>>($"api/Users/attackable-users?filter={value}");

        return AttackablePlayers.Select(c => c.UserName).AsEnumerable();
    }

    protected override void OnInitialized()
    {
        State.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        State.OnChange -= StateHasChanged;
    }
}
